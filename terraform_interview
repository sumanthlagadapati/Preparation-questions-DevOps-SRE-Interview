Nice set of **Terraform interview questions** 🔥
Here are **resume-backed, real-world answers** that fit your DevOps/SRE background:

---

## 🔹 Terraform Interview Q\&A

### 1. **What are common challenges faced while working with Terraform?**

* **State file conflicts** when multiple users try to apply changes.
* **Drift** between actual infra vs. Terraform definitions.
* **Secret management** (credentials inside `.tf` files).
* **Module reusability** → keeping modules DRY across teams.
* **Upgrades** (Terraform core/provider versions breaking compatibility).
* **Long apply times** for large-scale infra.

---

### 2. **How do you handle state file management in Terraform?**

* I always use **remote backends** (S3 + DynamoDB, Azure Blob, GCS).
* **Locking enabled** with DynamoDB (AWS) or state locking feature in Terraform Cloud.
* Run `terraform state list`, `terraform state rm/mv` for cleanup and migrations.
* Avoid manual edits → instead use **workspaces** for environment separation (dev/stage/prod).

---

### 3. **How do you detect and resolve drift in Terraform-managed infrastructure?**

* Run:

  ```bash
  terraform plan
  ```

  → shows differences between state file & actual infra.
* **Terraform Cloud drift detection** can run automatically.
* If drift detected:

  * If intentional (e.g., hotfix in console) → update `.tf` code.
  * If accidental → run `terraform apply` to restore infra.

---

### 4. **How do you manage secrets securely in Terraform?**

* Never hardcode secrets in `.tf` files.
* Approaches I’ve used:

  * **AWS Secrets Manager / SSM Parameter Store** → inject via data sources.
  * **Vault provider (HashiCorp Vault)** for dynamic secrets.
  * **Terraform variables with `sensitive = true`**.
  * Store `.tfvars` files in **Vault/KeyVault**, not Git.
* Example:

  ```hcl
  variable "db_password" {
    type      = string
    sensitive = true
  }
  ```

---

### 5. **Why should you use a remote backend for Terraform?**

* Benefits:

  * **Centralized state file** → teams collaborate safely.
  * **State locking** prevents race conditions.
  * **Secure storage** (encrypted in S3, GCS, Azure Blob).
  * **Audit trails & versioning** (Terraform Cloud, S3 versioning).
* Without remote backend → local state risks corruption & accidental overwrite.

---

Perfect 👍 Here’s a **Terraform Commands Cheat Sheet** you can use before interviews (and even keep in your GitHub repo as `terraform-cheatsheet.md`).

---

# 🚀 Terraform Commands Cheat Sheet

## 🔹 **Setup & Initialization**

```bash
terraform init
```

* Initializes Terraform in the working directory.
* Downloads providers & modules.

```bash
terraform validate
```

* Validates the syntax & configuration files.

```bash
terraform fmt -recursive
```

* Formats `.tf` files consistently.

---

## 🔹 **Planning & Execution**

```bash
terraform plan
```

* Shows execution plan (what will be created/changed/destroyed).

```bash
terraform apply
```

* Executes the plan and applies changes.

```bash
terraform apply -auto-approve
```

* Applies without manual approval (use with caution).

```bash
terraform destroy
```

* Tears down infrastructure defined in `.tf` files.

---

## 🔹 **State Management**

```bash
terraform state list
```

* Lists resources tracked in the state file.

```bash
terraform state show <resource>
```

* Displays details of a resource from state.

```bash
terraform state mv <source> <destination>
```

* Moves resources within state (e.g., module refactor).

```bash
terraform state rm <resource>
```

* Removes a resource from state (doesn’t destroy infra).

```bash
terraform refresh
```

* Updates state file with real infra state.

---

## 🔹 **Resource Management**

```bash
terraform import <resource> <id>
```

* Brings an existing infra resource into Terraform management.

```bash
terraform taint <resource>
```

* Marks a resource for recreation in the next `apply`.

```bash
terraform untaint <resource>
```

* Cancels taint on a resource.

---

## 🔹 **Workspaces (Multi-env Management)**

```bash
terraform workspace list
terraform workspace new dev
terraform workspace select prod
```

* Create & switch between environments (dev/stage/prod).

---

## 🔹 **Drift Detection & Debugging**

```bash
terraform plan -detailed-exitcode
```

* Exit code shows drift:

  * `0` → No changes.
  * `2` → Changes present.

```bash
terraform providers
```

* Shows which providers are in use.

```bash
TF_LOG=DEBUG terraform apply
```

* Debug mode for troubleshooting.

