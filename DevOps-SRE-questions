## 1. What is DevOps Lifecycle?

The DevOps lifecycle includes the following phases:

- **Plan**: Define project requirements and architecture.
- **Develop**: Write and test the code.
- **Build**: Convert source code into executable software.
- **Test**: Automated and manual testing.
- **Release**: Deploy the application to staging/production.
- **Deploy**: Deliver updates to users.
- **Operate**: Manage and monitor the application in production.
- **Monitor**: Use logging and monitoring tools to gather feedback.

---

## 2. Have you used any Linux Flavors, if yes, which one?

Some commonly used Linux distributions in DevOps are:

- **Ubuntu** (Popular for cloud and DevOps environments)
- **CentOS** (Stable for enterprise applications)
- **RedHat Enterprise Linux (RHEL)** (Enterprise-level Linux distribution)
- **Debian** (A stable choice for server environments)

---

## 3. What is the command to change the ownership and permission of a file or directory in Linux?

- **Change Ownership**: `chown user:group filename`
- **Change Permissions**: `chmod 755 filename`

Example:

```bash
chown ubuntu:ubuntu /var/www/html
chmod 644 index.html
```

---

## 4. How do you manage and view running processes in Linux?

- `ps aux` → View all running processes
- `top` or `htop` → Interactive process monitoring
- `kill <PID>` → Kill a specific process
- `killall <process_name>` → Kill all processes by name

---

## 5. What is SSH?

SSH (Secure Shell) is a protocol used for securely accessing remote machines over an encrypted connection.
Example:

```bash
ssh user@remote-server
```

---

## 6. What is DNS (Domain Name System), and how does it work?

DNS translates domain names (e.g., google.com) into IP addresses (e.g., 142.250.190.14). It follows a hierarchical structure:

- **Root DNS Servers**
- **TLD (Top-Level Domain) Servers**
- **Authoritative DNS Servers**

---

## 7. What is NAT (Network Address Translation), and why is it used?

NAT allows private IP addresses to communicate with the internet using a single public IP. It is used for:

- Conserving IPv4 addresses
- Providing security

---

## 8. Explain the difference between TCP and UDP Protocols?

| Feature     | TCP (Transmission Control Protocol) | UDP (User Datagram Protocol) |
| ----------- | ----------------------------------- | ---------------------------- |
| Connection  | Connection-oriented                 | Connectionless               |
| Reliability | Reliable                            | Unreliable                   |
| Speed       | Slower                              | Faster                       |
| Use Case    | Web browsing, file transfer         | Video streaming, gaming      |

---

## 9. What is Git, and how do we use it in DevOps?

Git is a version control system used to track changes in code.

Example:

```bash
git init  
git add .  
git commit -m "Initial Commit"  
git push origin main  
```

---

## 10. Explain the workflow of how to push the code from a local machine?

1. `git add .` → Add changes
2. `git commit -m "Message"` → Commit changes
3. `git push origin branch-name` → Push changes

---

## 11. How do you revert a commit that you made in your repository?

- `git revert <commit-hash>` → Creates a new commit that undoes changes
- `git reset --hard <commit-hash>` → Deletes commits

---

## 12. What is a Branch in a Repository?

A branch is an independent line of development in Git.
Example:

```bash
git branch feature-branch  
git checkout feature-branch  
```

---

## 13. What cloud platforms are you familiar with?

- AWS (Amazon Web Services)
- Microsoft Azure
- Google Cloud Platform (GCP)

---

## 14. What is VPC in cloud?

VPC (Virtual Private Cloud) is a logically isolated network in the cloud.

---

## 15. What is the difference between a Private and Public Subnet?

- **Public Subnet**: Has internet access via an internet gateway.
- **Private Subnet**: No direct internet access.

---

## 16. What is the difference between Reserved Instance and Spot Instances?

- **Reserved Instance**: Fixed-term pricing, cost-effective for predictable workloads.
- **Spot Instance**: On-demand, cheaper but can be terminated anytime.

---

## 17. What is AWS CloudFormation?

CloudFormation is an Infrastructure-as-Code (IaC) tool used to automate AWS infrastructure deployment.

---

## 18. What are the popular IaC tools have you used?

- Terraform
- AWS CloudFormation
- Ansible

---

## 19. What is the difference between Terraform & Ansible?

| Feature | Terraform              | Ansible                  |
| ------- | ---------------------- | ------------------------ |
| Type    | IaC Tool               | Configuration Management |
| Purpose | Creates infrastructure | Manages configuration    |

---

## 20. What is a Playbook in Ansible?

A playbook is a YAML file that contains automation scripts.

---

## 21. What is a State File in Terraform?

A file that keeps track of the infrastructure's current state.

---

## 22. What is Terraform Remote State Backend?

It stores Terraform state files remotely (e.g., S3 bucket, Consul, etc.).

---

## 23. What is the Difference between Virtualization and Containerization?

- **Virtualization** → Uses VMs, heavier.
- **Containerization** → Uses Docker, lightweight.

---

## 24. What problem does Docker solve?

- Eliminates dependency issues
- Enables lightweight, fast deployments

---

## 25. What is a Dockerfile and why do we use it?

A script defining how to build a Docker image.

Example:

```dockerfile
FROM ubuntu  
RUN apt-get update  
CMD ["echo", "Hello, Docker!"]  
```

---

## 26. Explain the workflow of how a Docker Container is created?
1. **Pull Image**: Download the required image from Docker Hub using `docker pull <image_name>`.
2. **Create & Start a Container**: Use `docker run -d <image_name>` to create and start a container.
3. **Container Execution**: The container runs the application inside the environment defined by the image.
4. **View Running Containers**: Check running containers with `docker ps`.
5. **Manage Containers**: Start, stop, restart, or remove containers using `docker start/stop/rm <container_id>`.
6. **Persistent Storage**: Use volumes (`-v /host/path:/container/path`) to persist data.
7. **Networking**: Expose ports (`-p 8080:80`) to allow external access.

---

## 27. How do you manage multiple Containers?
Multiple containers are managed using:
- **Docker Compose**: Define multi-container applications using a `docker-compose.yml` file.
- **Docker Swarm**: A native clustering tool for container orchestration.
- **Kubernetes**: A powerful container orchestration system.
- **Networking & Volume Management**: Use Docker networks (`docker network create my_network`) and volumes (`docker volume create my_volume`).
- **Resource Limits**: Control CPU & memory using `--memory` and `--cpus` flags.

---

## 28. What is CI and CD in CICD?
- **CI (Continuous Integration)**: Automates code merging, testing, and builds when developers push changes.
- **CD (Continuous Deployment/Delivery)**: Ensures that new code is automatically deployed to production (Deployment) or made available for manual release (Delivery).

---

## 29. What CICD tools have you used in the past?
- Jenkins
- GitHub Actions
- GitLab CI/CD
- CircleCI
- Travis CI
- AWS CodePipeline
- Azure DevOps

---

## 30. How will you create a CICD pipeline to update the website or app on every commit to a particular branch?
1. **Set up a Repository**: Use GitHub/GitLab/Bitbucket.
2. **Create a Jenkins Pipeline**:
   - Clone the repo on every push (`git checkout <branch>`).
   - Run unit tests (`mvn test`, `npm test`).
   - Build the application (`mvn package`, `docker build`).
   - Deploy the updated app to the server using `scp`, `kubectl apply`, or `ansible`.
   - Notify developers using Slack, email, or webhooks.

---

## 31. Explain staging, production, and testing environment.
- **Testing**: Internal environment for developers to test code.
- **Staging**: A pre-production environment to simulate real-world use cases.
- **Production**: The live environment accessed by end-users.

---

## 32. What is a Blue-Green Deployment?
A **Blue-Green Deployment** minimizes downtime by maintaining two environments:
- **Blue (Active)**: Running production version.
- **Green (New Release)**: New version deployed.
- Switch traffic to Green once tested.

---

## 33. Explain Canary Deployment?
A **Canary Deployment** gradually rolls out a new version to a small percentage of users before full release.
- If successful, expand rollout.
- If issues occur, rollback to stable release.

---

## 34. What is the biggest issue you faced, and how did you resolve it?
Example:
- **Issue**: Application downtime due to database migration failure.
- **Solution**:  
  - Implemented database versioning (Flyway, Liquibase).
  - Used Blue-Green deployment to test changes.
  - Created automated rollback scripts.

---

## 35. How do you scale your application?
- **Horizontal Scaling**: Add more instances (`docker-compose scale`, Kubernetes replicas).
- **Vertical Scaling**: Increase CPU/RAM allocation.
- **Load Balancing**: Use Nginx, HAProxy, AWS ALB.
- **Auto-scaling**: AWS Auto Scaling, Kubernetes HPA.

---

## 36. How do you rollback if something fails?
- **Git Revert**: Revert to the previous commit.
- **Docker Rollback**: Use `docker service update --rollback`.
- **Kubernetes Rollback**: `kubectl rollout undo deployment`.
- **Jenkins Rollback**: Restore artifacts from backup.

---

## 37. How do you automate deployments?
Using CI/CD pipelines with tools like:
- **Jenkins, GitHub Actions, GitLab CI/CD**
- **Ansible, Terraform** for Infrastructure as Code
- **Docker & Kubernetes** for containerized apps

---

## 38. Which tools have you used for automating deployments?
- **CI/CD**: Jenkins, GitHub Actions, GitLab CI
- **Configuration Management**: Ansible, Puppet
- **Container Orchestration**: Kubernetes, Docker Swarm
- **Infrastructure as Code**: Terraform, CloudFormation

---

## 39. Have you written any Jenkins Pipeline from scratch?
Yes, using **Declarative** and **Scripted Pipelines**. Example:
```groovy
pipeline {
    agent any
    stages {
        stage('Build') { steps { sh 'mvn package' } }
        stage('Test') { steps { sh 'mvn test' } }
        stage('Deploy') { steps { sh 'scp target/app.war user@server:/deploy/' } }
    }
}
```

---

## 40. Mention some plugins you have used in Jenkins?
- Git Plugin
- Pipeline Plugin
- Kubernetes Plugin
- Docker Plugin
- Slack Notification Plugin
- SonarQube Plugin

---

## 41. What is CI/CD?
CI/CD automates software integration, testing, and deployment.
- **CI**: Frequent code commits with automated testing.
- **CD**: Automated or manual deployment to production.

---

## 42. How can you create backup and copy files in Jenkins?
- Backup using `cp -r $JENKINS_HOME /backup/jenkins/`.
- Use Jenkins ThinBackup plugin.

---

## 43. Assume you have 2 Jenkins jobs. The first job completed successfully, but the 2nd job failed. What will you do?
- **Check logs** for error details.
- **Re-run the job** after fixing issues.
- **Trigger rollback** if needed.

---

## 44. Process to integrate Git with Jenkins?
1. Install Git Plugin in Jenkins.
2. Configure GitHub credentials.
3. Use Git repository URL in Jenkins job configuration.

---

## 45. What is DSL in Jenkins?
**DSL (Domain Specific Language)** in Jenkins (Job DSL Plugin) allows creating Jenkins jobs programmatically using Groovy scripts.

---

## 46. Why use Jenkins instead of Bamboo?
- Jenkins is **open-source**, Bamboo is **paid**.
- Jenkins has a **larger plugin ecosystem**.
- Bamboo has **better Bitbucket integration**.

---

## 47. How to deploy a custom build of a code plugin to Jenkins?
- Place the `.hpi` or `.jpi` file in `$JENKINS_HOME/plugins`.
- Restart Jenkins.

---

## 48. What is the use of Jenkins home directory?
- Stores job configurations, logs, plugins, and user data.
- Default location: `/var/lib/jenkins/`.

---

## 49. How do you take a backup of Jenkins Jobs?
- Copy `JENKINS_HOME/jobs/`.
- Use **ThinBackup plugin**.

---

## 50. How to configure Jenkins nodes/agents with Jenkins master?
- Add a new node in **Manage Jenkins > Nodes**.
- Launch agent via SSH or JNLP.

---

## 51. What’s the difference between Recreate and Rolling Update strategies?
**Recreate Strategy:**
- Terminates all existing pods before creating new ones.
- Causes downtime as all old pods are deleted simultaneously.
- Used when new deployments require a complete restart.

**Rolling Update Strategy:**
- Gradually replaces old pods with new ones to ensure zero downtime.
- Uses `maxUnavailable` and `maxSurge` parameters to control rollout.
- Preferred for production environments where uptime is critical.

## 52. Why is Kubernetes widely used in modern organizations?
- Automates container deployment, scaling, and operations.
- Provides high availability and fault tolerance.
- Works well with microservices architectures.
- Enables multi-cloud and hybrid cloud environments.
- Supports declarative infrastructure via YAML manifests.

## 53. What are Cluster IP, Headless Services, and when should you use them?
**Cluster IP:**
- Default service type.
- Exposes the service within the Kubernetes cluster.
- Used for internal communication between pods.

**Headless Service:**
- Defined with `clusterIP: None`.
- Does not allocate a virtual IP.
- Used when clients need direct access to individual pod IPs (e.g., StatefulSets, databases).

## 54. What are stateless and stateful in YAML files?
**Stateless Applications:**
- Do not persist data between sessions.
- Can be freely restarted and scaled.
- Example: Web servers, API services.

**Stateful Applications:**
- Maintain state across restarts.
- Require persistent storage (e.g., databases, messaging queues).
- Deployed using StatefulSets in Kubernetes.

## 55. What are the different Kubernetes services, and how do they work?
- **ClusterIP:** Internal access only.
- **NodePort:** Exposes service on a static port on each node.
- **LoadBalancer:** Uses a cloud provider's load balancer to expose services externally.
- **Headless Service:** No ClusterIP, directly resolves to pod IPs.

## 56. What is a Terraform state file, and why is it important?
- Stores the current state of infrastructure.
- Tracks resources managed by Terraform.
- Helps in detecting changes and preventing configuration drift.

## 57. What resources have you created using Terraform?
- AWS EC2 instances, VPCs, subnets, security groups.
- RDS instances, S3 buckets, IAM roles.
- Kubernetes clusters (EKS, GKE, AKS).
- Load balancers, Route 53 DNS records.

## 58. If an RDS instance is created via Terraform but later modified manually, how do you reconcile the changes?
- Run `terraform plan` to detect drift.
- Use `terraform apply` to override manual changes.
- If needed, import the changes using `terraform import`.

## 59. What is a Terraform local name, and how is it used?
- Defined using `locals` block in Terraform.
- Used to store reusable expressions.
- Example:
  ```hcl
  locals {
    env = "dev"
  }
  output "environment" {
    value = local.env
  }
  ```

## 60. What are Docker Volumes, and why use them instead of EC2 storage?
- Persist data across container restarts.
- Decoupled from the container lifecycle.
- Can be shared among multiple containers.
- More flexible than EC2 instance storage.

## 61. Is Docker volume data persistent?
- Yes, data in Docker volumes persists even if containers are stopped or removed.

## 62. How do you implement a CI/CD pipeline? Can you write a Jenkins pipeline?
- Steps:
  1. Code is pushed to GitHub.
  2. Jenkins detects changes and triggers a build.
  3. Builds artifacts and runs tests.
  4. Deploys to a Kubernetes cluster.

- **Jenkinsfile Example:**
  ```groovy
  pipeline {
    agent any
    stages {
      stage('Build') {
        steps {
          sh 'mvn clean package'
        }
      }
      stage('Test') {
        steps {
          sh 'mvn test'
        }
      }
      stage('Deploy') {
        steps {
          sh 'kubectl apply -f deployment.yaml'
        }
      }
    }
  }
  ```

## 63. Why use ArgoCD for Kubernetes deployments? How does it work end to end?
- **Why ArgoCD?**
  - GitOps approach for Kubernetes deployments.
  - Ensures cluster state matches Git repository.
  - Provides a UI and audit trail for deployments.

- **How it works:**
  1. Define Kubernetes manifests in a Git repository.
  2. ArgoCD continuously monitors the repo.
  3. If drift is detected, ArgoCD syncs changes.
  4. Ensures Kubernetes deployments are always in the desired state.

## 64. How do you establish communication between frontend and backend services?
- Use Kubernetes services (ClusterIP, LoadBalancer, Ingress).
- Example: Backend as a service exposed via ClusterIP.
- Frontend connects via service name (`http://backend-service:8080`).

## 65. What are the key services used in your project?
- Kubernetes (EKS/GKE/AKS), ArgoCD, Prometheus, Grafana.
- Terraform for infrastructure as code.
- CI/CD tools like Jenkins/GitHub Actions.
- Database services (RDS, PostgreSQL, MongoDB).

## 66. When do you use headless services vs. cluster services?
- **Headless Services:** When direct pod-to-pod communication is needed (e.g., databases, stateful applications).
- **ClusterIP Services:** When internal service discovery is sufficient.

## 67. What’s the best way to deploy and manage microservices in a Kubernetes environment?
- Use **Helm charts** for packaging microservices.
- Implement **ArgoCD/GitOps** for deployment automation.
- Set up **Horizontal Pod Autoscaler** for scalability.
- Use **service mesh (Istio/Linkerd)** for networking.
- Implement **monitoring (Prometheus/Grafana)**.

## 68. How does your organization handle cloud-native deployments efficiently?
- Uses **Infrastructure as Code (Terraform, Helm)**.
- Implements **CI/CD pipelines (Jenkins, GitHub Actions, ArgoCD)**.
- Adopts **observability tools (Prometheus, Loki, ELK)**.
- Implements **auto-scaling and cost optimization strategies**.



🟣 DevOps Engineer Interview Q&A – Technical + HM Prep
Round 1: Technical Screening
1. Explain the CI/CD workflow you follow and the kind of pipeline you use. How do you define and invoke pipelines in Jenkins?

I use Jenkins Declarative pipelines defined in Jenkinsfiles stored in Git repos.

Stages: Build → Unit Test → Static Scan → Docker Build/Push → Deploy (Helm/Terraform) → Smoke Tests.

Pipelines are invoked via Git webhooks, scheduled jobs, or triggered manually for controlled releases.

2. What are shared libraries in Jenkins, and how are they written and defined?

Shared libraries store reusable Groovy scripts (e.g., build, deploy, notify).

Structure:

vars/
   buildApp.groovy
src/org/company/utils/


Referenced in Jenkinsfile with:

@Library('shared-lib') _
buildApp()

3. What kind of applications do you deploy using Jenkins pipelines, and what deployment tools do you use?

Deployed Java (Spring Boot), Python APIs, NodeJS, React.

Deployment tools: Helm for K8s (EKS/AKS), Terraform for infra, UrbanCode Deploy (legacy).

4. If the Jenkins pipeline runs but the build doesn’t happen, what possible issues could be causing it?

Agent/node mismatch.

Wrong Maven/Gradle config.

SCM branch not found.

Missing credentials for Git/registry.

5. What is the purpose of a webhook, and how is it used in a CI/CD pipeline?

Webhook = Event trigger (e.g., Git push → Jenkins build).

Ensures fast feedback and eliminates manual triggering.

6. How do you create and manage Kubernetes clusters (using tools like Terraform), and what are the master and worker nodes?

Provisioned EKS clusters via Terraform modules (VPC, SGs, IAM roles, node groups).

Master (control plane) = API server, etcd, scheduler.

Workers = EC2 nodes running pods.

7. Common Kubernetes errors you’ve faced and resolution?

CrashLoopBackOff → fix env vars, configs, image issues.

ImagePullError → fix ECR creds (aws ecr get-login).

Pending pods → adjust node selectors, resource quotas.

8. Command to access a pod and create a Kubernetes object?
kubectl exec -it <pod> -- /bin/bash


YAML Example:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 2
  template:
    spec:
      containers:
      - name: app
        image: nginx

9. Explain Helm chart folder structure and deployment commands.
mychart/
 ├── Chart.yaml
 ├── values.yaml
 ├── templates/
 └── charts/


helm create mychart

helm install myapp ./mychart -f values.yaml

helm upgrade --install

10. What are the stages in a Docker image build? Why ENTRYPOINT vs CMD?

Stages: FROM → COPY/ADD → RUN → EXPOSE → ENTRYPOINT/CMD.

ENTRYPOINT = fixed command.

CMD = default args (override at runtime).

11. How do you manage and connect services like DBs, EC2, EKS, ECS? ECS connect command?

DBs via Secrets Manager + K8s secrets.

EC2 with Terraform/Ansible.

EKS via Helm/ArgoCD.

ECS command:

aws ecs execute-command --cluster myCluster --task taskID --container myApp --command "/bin/sh" --interactive

12. Which container registry do you use?

AWS ECR, Azure ACR, and DockerHub (POCs).

Round 2: In-depth Technical Screening
1. Branching strategy & production bug fix approach?

GitFlow: features → develop → release → main.

Prod bug → hotfix branch, patch, test, merge into release/main, redeploy.

2. Typical deployment flow & Jenkins stages?

SCM Checkout → Build → Test → SonarQube scan → Docker build/push → Helm deploy → Post-deploy checks.

Ensured quality using SonarQube gates, Trivy scans, rollback on failure.

3. Jenkins shared libraries usage & structure?
vars/
   buildApp.groovy
src/
   org.company.utils


Integrated with:

@Library('shared-library') _
buildApp()

4. Security scanning tools for Docker images?

Trivy, Anchore, Aqua integrated in CI/CD.

Also enabled ECR registry scans.

5. Passing env variables in Docker builds & storing images?
docker build --build-arg ENV=dev .


Stored in ECR/ACR/DockerHub.

6. DB connections in deployments?

Via K8s secrets, ConfigMaps.

RDS uses IAM auth + SGs.

7. EKS authentication & secret management?

Auth via aws eks update-kubeconfig.

Secrets in AWS Secrets Manager, HashiCorp Vault, KMS-encrypted K8s secrets.

8. AWS Lambda deployment & artifacts?

Packaged .zip, stored in S3, deployed via CLI/Terraform.

aws lambda update-function-code --function-name myFunc --s3-bucket my-bucket --s3-key lambda.zip

9. Email signing & Helm chart signing?

Email signing: ensures authenticity (PGP/GPG).

Helm chart signing:

helm package --sign --key <KEY> --keyring <PATH> mychart/

Round 3: Hiring Manager Round
1. Project Experiences

Built Terraform modules for AWS multi-region infra (EKS, VPC, SGs).
Automated CI/CD with Jenkins & GitLab for Java/Python/microservices.
Implemented GitOps with ArgoCD for K8s deployments.
Improved observability with Grafana, Prometheus, Datadog, CloudWatch.

2. Day-to-Day Responsibilities

IaC with Terraform, managing AWS/EKS resources.
CI/CD pipeline maintenance & improvements.
Incident response & root cause analysis.
Monitoring & alerts setup for apps & infra.

3. Behavioral Highlights

Strength: Automation-first mindset.
Weakness: Initially tech-focused, improved collaboration via mentoring.
Conflict: Resolved via blameless postmortems & transparent comms.

4. Teamwork & Culture Fit

Worked in Agile teams (Jira, daily standups, sprint reviews).
Partnered with Dev/QA/SRE for end-to-end delivery.
Promoted DevSecOps culture by embedding scans/security into CI/CD.

🔹 Linux Interview Q&A
1. How do you check running processes in Linux?

Common commands:

ps aux          # Show all processes with details
ps -ef          # Full-format listing
top             # Real-time view of processes
htop            # Interactive, colored version of top


For filtering:

ps -ef | grep java    # Find Java processes
pgrep nginx           # Find PID of nginx

2. What’s the difference between top, htop, and ps?

ps: Snapshot of processes at a given time (not real-time).

top: Real-time monitoring (CPU/memory usage).

htop: Advanced version of top → interactive UI, scrolling, sorting, and killing processes easily.

3. How to schedule a cron job every 15 minutes?

Edit crontab:

crontab -e


Add entry:

*/15 * * * * /path/to/script.sh


👉 Runs script every 15 minutes.

4. What is the difference between hard link and soft link?

Hard Link:

Points directly to the inode of a file.

File still exists even if original is deleted.

Cannot span across filesystems.

Example:

ln file1 file2


Soft Link (Symbolic Link):

Points to the path of the original file.

Breaks if the target is deleted.

Can span filesystems.
Example:
ln -s file1 file2

5. How to find which process is using high memory?

Using top or htop, sort by memory usage (M).
Or with ps:
ps aux --sort=-%mem | head -10


Great questions 👌 These are exactly the kind of **practical DevOps/SRE interview questions** you’ll see. I’ll answer each one clearly and in a way you can explain in interviews.

---

### 1️⃣ What is SCM, IaC, playbook, and a Docker image?

* **SCM (Source Code Management):** Tools like **Git** that track code changes, enable collaboration, and maintain version history.
* **IaC (Infrastructure as Code):** Writing infra definitions (Terraform, CloudFormation, Ansible) in code so you can version, review, and automate deployments.
* **Playbook:** An **Ansible script** containing tasks for automation, e.g., installing packages or configuring servers.
* **Docker Image:** A **blueprint for containers**, containing application code + runtime + dependencies, built once and run anywhere.

---

### 2️⃣ Explain Git and GitHub in simple terms.

* **Git:** A version control system that lets you track code changes locally.
* **GitHub:** A cloud-based hosting service for Git repositories where teams collaborate, review code, and integrate CI/CD.

---

### 3️⃣ How does GitLab CI/CD work?

* GitLab CI/CD uses a **`.gitlab-ci.yml` pipeline file** stored in the repo.
* Code pushes trigger the pipeline.
* **Runners** execute jobs defined in stages (build, test, deploy).
* Results (artifacts, test reports, deployments) are visible in GitLab UI.

---

### 4️⃣ What are the stages you have built in Jenkins pipelines?

Typical stages:

* **Build:** Compile code (Java → Maven, Node → npm).
* **Test:** Run unit, integration, security, performance tests.
* **Package:** Create artifacts (JARs, Docker images).
* **Deploy:** Push to staging/prod (K8s, EC2, AKS).
* **Notify:** Slack/email alerts for success/failure.

---

### 5️⃣ How do you resolve pipeline errors in Jenkins?

* **Check console logs** for root cause.
* Validate **Jenkinsfile syntax** (`pipeline syntax generator`).
* Verify environment dependencies (agents, plugins, Docker images).
* Add **retry/backoff logic** for flaky steps.
* If infra-related, check **permissions, credentials, or network reachability**.

---

### 6️⃣ How can you schedule a cron job in shell scripting?

* Use `crontab -e` and add a schedule:

  ```bash
  0 2 * * * /home/user/backup.sh   # Runs daily at 2AM
  ```
* Format: `minute hour day month weekday command`.

---

### 7️⃣ What is Kubernetes and why do we use it?

* **Kubernetes (K8s):** An open-source container orchestrator that automates deployment, scaling, and management of containers.
* **Why use it?**

  * Self-healing (restarts crashed pods).
  * Auto-scaling.
  * Service discovery + load balancing.
  * Declarative config via YAML.

---

### 8️⃣ If a pod crashes, how would you fix/debug it?

* Run:

  ```bash
  kubectl get pods
  kubectl describe pod <pod-name>
  kubectl logs <pod-name>
  ```
* Check events for OOMKilled, CrashLoopBackOff, image pull errors.
* Fix: adjust resources, fix code/config, redeploy image.

---

### 9️⃣ How do you secure a Terraform state file?

* Store in **remote backends** (S3 with encryption, GCS, Azure Blob).
* Enable **state locking** (DynamoDB for AWS).
* Restrict access with IAM policies.
* Use **encryption (KMS)** for sensitive data.

---

### 🔟 How do you manage secrets in DevOps projects?

* **Vaults:** HashiCorp Vault, AWS Secrets Manager, Azure Key Vault.
* **K8s Sealed Secrets** or External Secrets Operator.
* Rotate secrets regularly.
* Never commit secrets to Git.

------------------------------------------------------------------------------------

### 1️⃣1️⃣ What is a Kubernetes Deployment vs StatefulSet?

* **Deployment:** For stateless apps, scales pods without identity, pods interchangeable.
* **StatefulSet:** For stateful apps, each pod has stable identity (DNS, storage). Used for DBs, Kafka, Zookeeper.

--------------------------------------------------------------------------------------------
### 1️⃣2️⃣ How does Service & Ingress work in Kubernetes?

* **Service:** Provides stable DNS & load balancing to pods.
* Types: ClusterIP (internal), NodePort (expose on nodes), LoadBalancer (external).
* **Ingress:** Manages external HTTP/HTTPS routes with advanced rules (TLS, paths, hostnames). Needs an Ingress Controller.

-------------------------------------------------------------------------------------------------------------------
### 1️⃣3️⃣ What is the difference between ConfigMap and Secret in Kubernetes?

* **ConfigMap:** Stores **non-sensitive** config (URLs, ENV vars).
* **Secret:** Stores **sensitive** data (passwords, tokens), base64 encoded, better security (RBAC, encryption at rest).

---------------------------------------------------------------------------------------
### 1️⃣4️⃣ How do you perform rolling updates & rollbacks in Kubernetes?

* Rolling update:

  ```bash
  kubectl set image deployment/app app=nginx:1.21
  kubectl rollout status deployment/app
  ```
* Rollback:

  ```bash
  kubectl rollout undo deployment/app
  ```
* Ensures zero downtime deployments.
-------------------------------------------------------------------------------------------
### 1️⃣5️⃣ What are taints and tolerations in Kubernetes, and when would you use them?

* **Taint:** Marks a node to **repel pods** unless they tolerate it.
* **Toleration:** Allows pods to run on tainted nodes.
* Use cases:
  * Isolate workloads (prod vs dev).
  * Run system-critical pods on dedicated nodes.
  * GPU workloads reserved for ML pods only.
